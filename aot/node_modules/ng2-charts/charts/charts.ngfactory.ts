/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from 'ng2-charts/charts/charts';
import * as import2 from '@angular/core/src/di/injector';
import * as import3 from '@angular/core/src/change_detection/change_detection_util';
import * as import4 from '@angular/core/src/linker/view';
import * as import5 from '@angular/core/src/linker/view_utils';
class ChartsModuleInjector extends import0.NgModuleInjector<import1.ChartsModule> {
  _ChartsModule_0:import1.ChartsModule;
  constructor(parent:import2.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  createInternal():import1.ChartsModule {
    this._ChartsModule_0 = new import1.ChartsModule();
    return this._ChartsModule_0;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import1.ChartsModule)) { return this._ChartsModule_0; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const ChartsModuleNgFactory:import0.NgModuleFactory<import1.ChartsModule> = new import0.NgModuleFactory(ChartsModuleInjector,import1.ChartsModule);
export class Wrapper_BaseChartDirective {
  /*private*/ _eventHandler:Function;
  context:import1.BaseChartDirective;
  /*private*/ _changed:boolean;
  /*private*/ _changes:{[key: string]:any};
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  subscription0:any;
  subscription1:any;
  constructor(p0:any) {
    this._changed = false;
    this._changes = {};
    this.context = new import1.BaseChartDirective(p0);
    this._expr_0 = import3.UNINITIALIZED;
    this._expr_1 = import3.UNINITIALIZED;
    this._expr_2 = import3.UNINITIALIZED;
    this._expr_3 = import3.UNINITIALIZED;
    this._expr_4 = import3.UNINITIALIZED;
    this._expr_5 = import3.UNINITIALIZED;
    this._expr_6 = import3.UNINITIALIZED;
  }
  ngOnDetach(view:import4.AppView<any>,componentView:import4.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
  }
  check_data(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import5.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.data = currValue;
      this._changes['data'] = new import3.SimpleChange(this._expr_0,currValue);
      this._expr_0 = currValue;
    }
  }
  check_datasets(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import5.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.datasets = currValue;
      this._changes['datasets'] = new import3.SimpleChange(this._expr_1,currValue);
      this._expr_1 = currValue;
    }
  }
  check_labels(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import5.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.labels = currValue;
      this._changes['labels'] = new import3.SimpleChange(this._expr_2,currValue);
      this._expr_2 = currValue;
    }
  }
  check_options(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import5.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.options = currValue;
      this._changes['options'] = new import3.SimpleChange(this._expr_3,currValue);
      this._expr_3 = currValue;
    }
  }
  check_chartType(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import5.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.chartType = currValue;
      this._changes['chartType'] = new import3.SimpleChange(this._expr_4,currValue);
      this._expr_4 = currValue;
    }
  }
  check_colors(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import5.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this._changed = true;
      this.context.colors = currValue;
      this._changes['colors'] = new import3.SimpleChange(this._expr_5,currValue);
      this._expr_5 = currValue;
    }
  }
  check_legend(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import5.checkBinding(throwOnChange,this._expr_6,currValue))) {
      this._changed = true;
      this.context.legend = currValue;
      this._changes['legend'] = new import3.SimpleChange(this._expr_6,currValue);
      this._expr_6 = currValue;
    }
  }
  ngDoCheck(view:import4.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) {
      if (changed) {
        this.context.ngOnChanges(this._changes);
        this._changes = {};
      }
      if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); }
    }
    return changed;
  }
  checkHost(view:import4.AppView<any>,componentView:import4.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import4.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.chartClick.subscribe(_eventHandler.bind(view,'chartClick'))); }
    if (emit1) { (this.subscription1 = this.context.chartHover.subscribe(_eventHandler.bind(view,'chartHover'))); }
  }
}